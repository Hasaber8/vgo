package app

import (
	"context"
	"log"
	"os"
	"time"

	db "{{ returnModName . }}/internal/database"
	"{{ returnModName . }}/internal/handlers"
	"github.com/joho/godotenv"
)

type App struct {
	API_SERVER_PORT            string
	{{ if ne .Database "none" }}
	{{ if eq .Database "mongodb" }}
	DB_MONGODB_URL             string
	DB_MONGODB_DB_NAME         string
	DB_MONGODB_COLLECTION_NAME string
	{{ else }}
	DB_CONNECTION_STRING       time.Duration
	{{ end }}
	{{ end }}
}

func NewApp() *App {
	return &App{}
}

func (a *App) Init() {
	a.SetupEnv()
	a.SetupServer()
}

func (a *App) SetupEnv() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal(err)
	}

	a.Env = &Env{
		API_SERVER_PORT:            os.Getenv("API_SERVER_PORT"),
		{{ if ne .Database "none" }}
        {{ if eq .Database "mongodb" }}
        DB_MONGODB_URL:             os.Getenv("DB_MONGODB_URL"),
        DB_MONGODB_DB_NAME:         os.Getenv("DB_MONGODB_DB_NAME"),
        DB_MONGODB_COLLECTION_NAME: os.Getenv("DB_MONGODB_COLLECTION_NAME"),
        {{ else }}
        DB_CONNECTION_STRING:       os.Getenv("DB_CONNECTION_STRING"),
        {{ end }}
        {{ end }}
	}
}

func (a *App) SetupServer() {
    {{ returnDbInstance .Database }}
    h := handlers.New(db)
    h.SetupRoutes()

    err := h.StartServer()
    if err != nil {
        fmt.Errorf("Error Starting Server:\nMessage:\n%v", err.Error())
    }
}
