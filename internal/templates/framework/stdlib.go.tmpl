package handlers

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

    db "{{ returnModName . }}/internal/database"
)

type Handler struct {
	mux *http.ServeMux
	db  *db.DB
}

func New(db *db.DB) *Handler {
	return &Handler{
		mux: http.NewServeMux(),
		db:  db,
	}
}

func (h *Handler) SetupRoutes() {
	h.mux.HandleFunc("/health", h.HealthCheck)

	// Add more routes here (E.g.)
	// h.mux.HandleFunc("/hello", h.Hello)
}

func (h *Handler) StartServer() error {
    if err := http.ListenAndServe(":8080", h.mux), err != nil {
        return err
    }
    return nil
}

func (h *Handler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	{{ if ne .Database "none" }}
	w.Header().Set("Content-Type", "application/json")
	err := h.db.HealthCheck()
	if err != nil {
		log.Println(err.Error())
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode("Internal Server Error")
		return
	}
    {{ end }}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode("OK")
}
