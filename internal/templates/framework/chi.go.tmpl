package handlers

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	db "{{- .ModName -}}/internal/database"
)

type Handler struct {
	router *chi.Mux
	db     *db.DB
}

func New(db *db.DB) *Handler {
	return &Handler{
		router: chi.NewRouter(),
		db:     db,
	}
}

func (h *Handler) SetupRoutes() {
	h.router.Get("/health", h.HealthCheck)

	// Add more routes here (E.g.)
	// h.router.Get("/hello", h.Hello)
}

func (h *Handler) StartServer() error {
    err := http.ListenAndServe(":8080", h.router)
    if err != nil {
        return err
    }
    return nil
}

func (h *Handler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	{{ if ne .Database "none" }}
	err := h.db.HealthCheck()
	if err != nil {
		log.Fatal(err)
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode("Internal Server Error")
		return
	}
	{{ end }}
	log.Println("Health check passed")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode("OK")
}
