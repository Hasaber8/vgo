package db

import (
	"context"
	"time"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type DB struct {
	db   *mongo.Database
	coll *mongo.Collection
}

func New(uri string, dbName string, collName string) (*DB, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	client, err := mongo.Connect(ctx, options.Client().ApplyURI(uri))
	if err != nil {
		return nil, err
	}

	database := client.Database(dbName)
	collection := database.Collection(collName)

	return &DB{
		db:   database,
		coll: collection,
	}, nil
}

func (d *DB) HealthCheck() error {
	if err := d.db.Client().Ping(nil, nil); err != nil {
		return err
	}
	return nil
}


// Define any additional methods here, For example...
// func (d *DB) GetData(ctx context.Context, filter interface{}) (interface{}, error) {
//     result := make(map[string]interface{})
//
//     err := d.coll.FindOne(ctx, filter).Decode(&result)
//     if err != nil {
//     return nil, err
//     }
//
//     return result, nil
// }
